# Blue-Green Deployment Nginx Configuration
# This configuration enables seamless traffic switching between blue and green environments

upstream blue_frontend {
    server localhost:3000;
    keepalive 32;
}

upstream green_frontend {
    server localhost:4000;
    keepalive 32;
}

upstream blue_backend {
    server localhost:3001;
    keepalive 32;
}

upstream green_backend {
    server localhost:4001;
    keepalive 32;
}

# Set the active environment variable (dynamically updated by deployment script)
# Default to blue if not set
set $active_env "blue";

server {
    listen 80;
    server_name www.ssplt10.cloud ssplt10.cloud;

    # Security headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Deployment-Environment $active_env always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Health check endpoint (always available)
    location /health {
        access_log off;
        return 200 "healthy - active_env: $active_env\n";
        add_header Content-Type text/plain;
        add_header X-Active-Environment $active_env;
    }

    # Detailed health check
    location /health/detailed {
        access_log off;
        default_type application/json;

        # Test both environments and return status
        content_by_lua_block {
            local http = require "resty.http"
            local cjson = require "cjson"

            local response = {
                active_environment = ngx.var.active_env,
                timestamp = ngx.time(),
                environments = {}
            }

            -- Check blue environment
            local blue_status = "unhealthy"
            local httpc = http.new()
            local res, err = httpc:request_uri("http://localhost:3000/health", {
                method = "GET",
                headers = { ["Host"] = "localhost" }
            })
            if res and res.status == 200 then
                blue_status = "healthy"
            end

            -- Check green environment
            local green_status = "unhealthy"
            httpc = http.new()
            res, err = httpc:request_uri("http://localhost:4000/health", {
                method = "GET",
                headers = { ["Host"] = "localhost" }
            })
            if res and res.status == 200 then
                green_status = "healthy"
            end

            response.environments = {
                blue = blue_status,
                green = green_status
            }

            ngx.say(cjson.encode(response))
        }
    }

    # Frontend routing - route to active environment
    location / {
        # Route based on active environment
        if ($active_env = "blue") {
            proxy_pass http://blue_frontend;
        }
        if ($active_env = "green") {
            proxy_pass http://green_frontend;
        }

        # Proxy settings
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Active-Environment $active_env;
        proxy_cache_bypass $http_upgrade;

        # Timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # SPA fallback
        try_files $uri $uri/ /index.html;
    }

    # API routing - route to active environment
    location /api/ {
        # Route based on active environment
        if ($active_env = "blue") {
            proxy_pass http://blue_backend;
        }
        if ($active_env = "green") {
            proxy_pass http://green_backend;
        }

        # Remove /api prefix when forwarding
        rewrite ^/api/(.*) /$1 break;

        # Proxy settings
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Active-Environment $active_env;
        proxy_cache_bypass $http_upgrade;

        # CORS headers for API
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # Timeout settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Static assets caching
    location /assets/ {
        # Route based on active environment
        if ($active_env = "blue") {
            proxy_pass http://blue_frontend;
        }
        if ($active_env = "green") {
            proxy_pass http://green_frontend;
        }

        # Aggressive caching for static assets
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Cache-Status "STATIC";

        # Proxy settings for static files
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Cache other static files
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # Route based on active environment
        if ($active_env = "blue") {
            proxy_pass http://blue_frontend;
        }
        if ($active_env = "green") {
            proxy_pass http://green_frontend;
        }

        # Long-term caching
        expires 6M;
        add_header Cache-Control "public, immutable";
        add_header X-Cache-Status "STATIC";

        # Proxy settings
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Error pages
    error_page 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    # Security: Don't list directory contents
    autoindex off;

    # Rate limiting (optional)
    # limit_req zone=api burst=10 nodelay;
}

# Redirect HTTP to HTTPS (if SSL is configured)
server {
    listen 80;
    server_name www.ssplt10.cloud ssplt10.cloud;
    return 301 https://www.ssplt10.cloud$request_uri;
}

# SSL Configuration (uncomment and configure when SSL certificates are available)
# server {
#     listen 443 ssl http2;
#     server_name www.ssplt10.cloud ssplt10.cloud;
#
#     ssl_certificate /path/to/ssl/certificate.crt;
#     ssl_certificate_key /path/to/ssl/private.key;
#
#     # SSL settings
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#
#     # Include the same location blocks as above
#     # ... (copy all location blocks from the HTTP server)
# }